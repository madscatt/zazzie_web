#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,locale
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.interface.input_filter as input_filter
import sassie.interface.align_filter as align_filter
import sassie.tools.align as align

class Align_Drv():

   module = 'align'

   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
	first = True

        while process.is_alive():
                try:
			if(first):
                                socket_dict['progress_html'] = '<center>starting job</center>'
        			socket_dict['_progress'] = 0.01
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
			this_text = txtQueue.get(True, timeout=0.1)
			text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
				if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]	
				if socket_dict:
                                	doc_string = json.dumps(socket_dict)
                                	sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
				socket_dict["_textarea"] = this_text
				if socket_dict:
                        		doc_string = json.dumps(socket_dict)
                        		sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                total_string += this_text
                except:
                        if not process.is_alive():
				
                                return total_string

                time.sleep(0.1)
        else:
                return total_string

        return total_string

   def run_me(self,json_flag,json_variables,input_string):

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

        	runname='run_0'
		inpath = './'
		pdbmol1 = 'c2.pdb'
		pdbmol2 = 'c2.pdb'
		infile = 'c2.dcd'
		ofile = 'ac2.dcd'
		basis1 = 'CA'
		basis2 = 'CA'
		lowres1 = '145'
		lowres2 = '145'
		highres1 = '350'
		highres2 = '350'
		ebasis1 = 'None'
		ebasis2 = 'None'
		
		path = ''

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
		runname = json_variables['runname']
        	basis1 = json_variables['basis1']
        	basis2 = json_variables['basis2']
        	lowres1 = json_variables['lowres1']
        	lowres2 = json_variables['lowres2']
        	highres1 = json_variables['highres1']
        	highres2 = json_variables['highres2']
        	ebasis1 = json_variables['ebasis1']
        	ebasis2 = json_variables['ebasis2']
        	ofile = json_variables['ofile']


                base_directory = json_variables['_base_directory']

                path = base_directory.replace('\/','/') + "/"

                os.chdir(path)

                ofile = json_variables['ofile']

        	pdbmol1 = json_variables['pdbmol1'][0]

        	pdbmol2 = json_variables['pdbmol2'][0]

                infile = json_variables['infile'][0]

		path = ''

	output_dict = {}

	svariables={} 
	
	svariables['runname']=(str(runname),'string') 
	svariables['path']=(str(path),'string')
	svariables['pdbmol1']=(str(pdbmol1),'string')
	svariables['pdbmol2']=(str(pdbmol2),'string')
	svariables['infile']=(str(infile),'string')
	svariables['ofile']=(str(ofile),'string')
	svariables['basis1']=(str(basis1),'string')
	svariables['basis2']=(str(basis2),'string')
	svariables['lowres1']=(str(lowres1),'int')
	svariables['lowres2']=(str(lowres2),'int')
	svariables['highres1']=(str(highres1),'int')
	svariables['highres2']=(str(highres2),'int')
	svariables['ebasis1']=(str(ebasis1),'string')
	svariables['ebasis2']=(str(ebasis2),'string')

	error = []
	error,self.variables=input_filter.type_check_and_convert(svariables)

        if(len(error)>0):

                self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

                output_dict['error'] = 'Error in input variables'
		if output_dict:
                	print json.dumps( output_dict )
                return
        else:
		error=align_filter.check_align(self.variables,no_file_check="true")

                if(len(error) != 0):
                        self.message_box(error,'warning.png')
                        output_dict['error'] = 'Error in align variables'
			if output_dict:
                        	print json.dumps( output_dict )
                        return

		runname=self.variables['runname'][0]

		if os.path.exists(runname+'/'+self.module):
			shutil.rmtree(runname+'/'+self.module)

		if not os.path.exists(runname+'/sassie_log'):
			os.system('mkdir -p '+runname+'/sassie_log')

		txtQueue=multiprocessing.JoinableQueue()
		process=multiprocessing.Process(target=align.align,args=(self.variables,txtQueue))
		process.start()
		total_string = self.background_job(process,txtQueue,json_variables)


        if total_string:
                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
#                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )

		
if __name__=='__main__':

	json_flag = True
	#json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"align called with no arguments\"\}\n";
 		print 'exiting now'

	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
		a=Align_Drv()
		a.run_me(json_flag,json_variables,sys.argv[1])

