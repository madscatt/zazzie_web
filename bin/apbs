#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,ast,locale
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.analyze.apbs as apbs
import sassie.interface.input_filter as input_filter
import sassie.interface.apbs_filter as apbs_filter

class Apbs_Drv():

   module = 'apbs'

   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        first = True

        while process.is_alive():
                try:
                        if(first):
                                socket_dict['progress_html'] = 0.01
                                socket_dict['_progress'] = 0.01
                                socket_dict['progress_html'] = '<center>starting job</center>'
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
                        this_text = txtQueue.get(True, timeout=0.1)
                        text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                socket_dict["_textarea"] = this_text
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                total_string += this_text
                except:
                        if not process.is_alive():

                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def run_me(self,json_flag,json_variables,input_string):

	output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

        	runname='run_0'

		pdbfile = 'min3.pdb'
		infile = 'c2.dcd'
		outfile = 'test_apbs.txt'
		temp = '300.0'
		ph = '5.2'
		ion_charge = '1.0'
		ion_conc = '0.0'
		ion_radius = '1.62'
		manualflag = '0'
		manualfile = 'dum.txt'	
        	path='./'

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
		runname = json_variables['runname']

		base_directory = json_variables['_base_directory']

        	path = base_directory.replace('\/','/') + "/"

		os.chdir(path)
		path = ''

        	pdbfile = json_variables['pdbfile'][0]
		#head, pdbfile = os.path.split(temp_pdbfile[0])

        	infile = json_variables['infile'][0]
		#head, infile = os.path.split(temp_infile[0])

		outfile = json_variables['outfile']
		temp = json_variables['temp']
		ph = json_variables['ph']
		ion_charge = json_variables['ion_charge']
		ion_conc = json_variables['ion_conc']
		ion_radius = json_variables['ion_radius']

		manualflag = "0"
		manualfile = "dum.txt"

		try:
			if(json_variables['user_list_box'] == "on"):
				manualflag = "1"
        			manualfile = json_variables['manualfile'][0]
				#head, manualfile = os.path.split(temp_manualfile[0])
		except:
			pass

	svariables={}

	svariables['runname']		= (str(runname),'string')
	svariables['infile']		= (str(infile),'string')
	svariables['pdbfile']		= (str(pdbfile),'string')
	svariables['outfile']		= (str(outfile),'string')
	svariables['temperature']	= (str(temp),'float')
	svariables['ph']		= (str(ph),'float')
	svariables['ion_charge']	= (str(ion_charge),'float')
	svariables['ion_conc']		= (str(ion_conc),'float')
	svariables['ion_radius']	= (str(ion_radius),'float')
	svariables['manual_flag']	= (str(manualflag),'int')
	svariables['manual_file']	= (str(manualfile),'string')

	error,self.variables=input_filter.type_check_and_convert(svariables)

        if(len(error)>0):

                self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

                output_dict['error'] = 'Error in input variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps( output_dict )
                return
        else:
                error=apbs_filter.check_apbs(self.variables,no_file_check="true")

                if(len(error) != 0):
                        self.message_box(error,'warning.png')
                        output_dict['error'] = 'Error in apbs variables'
                        output_dict['sasoutput2'] = 'run failed'
                        print json.dumps( output_dict )
                        return

                        runn

		runname=self.variables['runname'][0]

		if os.path.exists(runname+'/'+self.module):
			shutil.rmtree(runname+'/'+self.module)

		txtQueue=multiprocessing.JoinableQueue()
	
		process=multiprocessing.Process(target=apbs.apbs_driver,args=(self.variables,txtQueue))
		process.start()

		total_string = self.background_job(process,txtQueue,json_variables)

#		output_dict['sasoutput2'] = total_string

        if total_string:
                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
#                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )

		
if __name__=='__main__':

	json_flag = True
#	json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"apbs called with no arguments\"\}\n";
# 		print 'exiting now'

	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
			#json_variables = ast.literal_eval(argv_io_string)
		a=Apbs_Drv()
		a.run_me(json_flag,json_variables,sys.argv[1])

