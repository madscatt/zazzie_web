#!/share/apps/local/anaconda/bin/python
import json,sys,os,shutil,locale
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.calculate.capriqorn.capriqorn as capriqorn
import sassie.interface.input_filter as input_filter
import sassie.interface.capriqorn_filter as capriqorn_filter

class Capriqorn_Driver():

   module = 'capriqorn'

   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
	first = True
        while process.is_alive():
                try:
                        if(first):
                                socket_dict['progress_html'] = 0.01
                                socket_dict['_progress'] = 0.01
                                socket_dict['progress_html'] = '<center>starting job</center>'
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
                        this_text = txtQueue.get(True, timeout=0.1)
                        text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(100*value)
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                socket_dict["_textarea"] = this_text
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                total_string += this_text
                except:
                        if not process.is_alive():

                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def run_me(self,json_flag,json_variables,input_string):

	output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

		runname = 'run_0'
		pdbfile = 'protein.pdb'
		dcdfile = 'protein.crdbox'
		#dcdfile = 'protein_10frames_from_crdbox.dcd'
		#xstfile = 'protein_10frames_from_crdbox.xst'
		aliasfile= 'alias.dat' # the atomic type dictionary that is needed by capriqorn
		create_alias_flag= False
                
		number_q_values='21'
		q_max='0.2'

		core_path = os.getcwd()

		number_q_values='21'
		q_max='0.2'
		number_r_values='51'

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
		runname = json_variables['runname']

		base_directory = json_variables['_base_directory']

        	path = base_directory.replace('\/','/') + "/"

		os.chdir(path)
#		core_path = os.path.join(path,runname,'capriqorn','yaml')
		core_path = os.getcwd()
		pdbpath = path
		dcdpath = path
		
        	pdbfile = json_variables['pdbfile'][0]
		#head, pdbfile = os.path.split(temp_pdbfile[0])

        	dcdfile = json_variables['dcdfile'][0]
		#head, dcdfile = os.path.split(temp_dcdfile[0])

		number_q_values = json_variables['number_q_values']
		q_max = json_variables['q_max']
		
		try:
			xstfile = json_variables['xstfile'][0]
		except:
			xstfile = ''

                try:
                        advanced_input = json_variables['advanced_input']
                except:
                        advanced_input = 'off'
		
		aliasfile = 'alias.dat'
		create_alias_flag= False

		if advanced_input != 'off':
		
			try:
        			aliasfile = json_variables['aliasfile'][0]
			except:
        			create_alias_flag = True
	
		path = ''

		UDP_IP = json_variables['_udphost']

	svariables={}

	svariables['runname'] = (str(runname),'string')
	svariables['pdbfile'] = (str(pdbfile),'string')
	svariables['dcdfile'] = (str(dcdfile),'string')

	if dcdfile[-3:]=='dcd':
    		svariables['xstfile'] = (str(xstfile),'string')
	else:
    		svariables['xstfile'] = (str(''),'string')

	svariables['aliasfile'] = (str(aliasfile),'string')
	svariables['create_alias_flag'] = (str(create_alias_flag),'boolean')

	svariables['number_q_values'] = (str(number_q_values),'int')
	svariables['q_max'] = (str(q_max),'float')
		
 	svariables['core_path']		= (str(core_path),'string')
	
	error = []

 	error,variables=input_filter.type_check_and_convert(svariables)

	if(len(error)>0):
                self.message_box(error,'skull.png')
                output_dict['error'] = 'Error in input variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps( output_dict )
                return
	else:
                error=capriqorn_filter.check_capriqorn(variables)
                if(len(error) > 0):
                    self.message_box(error,'warning.png')
                    output_dict['error'] = 'Error in capriqorn variables'
                    output_dict['sasoutput2'] = 'run failed'
                    print json.dumps( output_dict )
                    return

		else:
			runname=variables['runname'][0]

			if os.path.exists(runname+'/'+self.module):
				shutil.rmtree(runname+'/'+self.module)

			with open("/share/apps/genapp/sassie2/results/log","w") as outfile:
				json.dump("\nvariables\n",outfile)
				json.dump(variables,outfile)
		
			total_string = "MODULE UNDER ACTIVE DEVELOPMENT: NOT FOR GENERAL USE (PRE-ALPHA)"
			txtQueue=multiprocessing.JoinableQueue()
			capriqorn_instance = capriqorn.capriqorn()
			process=multiprocessing.Process(target=capriqorn_instance.main,args=(variables,txtQueue))
			process.start()

                        total_string = self.background_job(process,txtQueue,json_variables)

	#		output_dict['sasoutput2'] = total_string

			'''
			flot_data = self.get_data_from_disk(runname+"/sascalc_pbc/"+outfile+".txt",5)

			if(isinstance(flot_data, basestring)):
				print 'error reading data'
				output_dict['plot_error'] = flot_data
			else:
				output_dict['plot1'] = flot_data
			'''

        if output_dict:
                print json.dumps( output_dict )
        else:
                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )
		
if __name__=='__main__':

	json_flag = True
	#json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"capriqorn called with no arguments\"\}\n";
# 		print 'exiting now'

	elif len(sys.argv) > 1:
                json_variables = " "
                if(json_flag):
                        argv_io_string = StringIO(sys.argv[1])
                        json_variables = json.load(argv_io_string)
		a=Capriqorn_Driver()
                a.run_me(json_flag,json_variables,sys.argv[1])


