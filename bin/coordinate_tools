#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,ast,locale
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.tools.coor_tools as coor_tools
import sassie.interface.input_filter as input_filter
import sassie.interface.coor_tools_filter as coor_tools_filter

class CoorTools_Drv():

   module = 'coor_tools'


   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
	first = True

        while process.is_alive():
                try:
                        if(first):
                                socket_dict['progress_html'] = 0.01
                                socket_dict['_progress'] = 0.01
                                socket_dict['progress_html'] = '<center>starting job</center>'
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
                        this_text = txtQueue.get(True, timeout=0.1)
                        text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                total_string += this_text
                except:
                        if not process.is_alive():

                                #doc_string = json.dumps(socket_dict)
                                #sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def run_me(self,json_flag,json_variables,input_string):

	output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

        	runname='run_0'
        	pdb_filename ='input.pdb'
        	filename = 'lysozyme.dcd'
        	option ='single_frame'
        	value = '6'
		output_filename = 'output.dcd'
		path = './'

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
		runname = json_variables['runname']

	#	output_dict['base_directory'] = json_variables['_base_directory']
		#output_dict['logon'] = json_variables['_logon']
	#	output_dict['project'] = json_variables['_project']

		base_directory = json_variables['_base_directory']

        	path = base_directory.replace('\/','/') + "/"

		os.chdir(path)

        	pdb_filename = json_variables['pdb_filename'][0]
		#head, pdb_filename = os.path.split(temp_pdb_filename[0])

        	filename = json_variables['filename'][0]
		#head, filename = os.path.split(temp_filename[0])
 
		path = ''

	
		option_list_box = json_variables['option_list_box']
                if(option_list_box == 'c1'):
                        option = 'single_frame'
			value = json_variables['local_value_c1']
                elif(option_list_box == 'c2'):
                        option = 'range'
			value = json_variables['local_value_c2']
                elif(option_list_box == 'c3'):
                        option = 'text_file'
        		temp_option = json_variables['local_value_c3']
			#head, value = os.path.split(temp_option[0])
			value = temp_option[0]
                elif(option_list_box == 'c4'):
                        option = 'weight_file'
        		temp_option = json_variables['local_value_c4']
			#head, value = os.path.split(temp_option[0])
			value = temp_option[0]
		output_filename = json_variables['output_filename']

	svariables={}


	svariables['runname'] = (str(runname),'string') 		# prefix to name output files
	svariables['path'] = (str(path),'string') 			# input file paths
	svariables['pdb_filename'] = (str(pdb_filename),'string') 	# name of input PDB
	svariables['filename'] = (str(filename),'string') 		# name of input PDB or DCD file	
	svariables['option'] = (str(option),'string')		# option: single_frame, range, text_file, weight_file
	svariables['local_value'] = (str(value),'string') 		#frame number, range, text/weight filename	
	svariables['output_filename'] = (str(output_filename),'string')  	# name of output file (type determined by suffix)

	error,variables=input_filter.type_check_and_convert(svariables)

#emre
        save_stdout = sys.stdout
        sys.stdout = sys.stderr
#end emre
        if(len(error)>0):

                self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

                output_dict['error'] = 'Error in input variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps( output_dict )
                return
        else:
		error=coor_tools_filter.check_coor_tools(variables,no_file_check="true")

                if(len(error) != 0):
                        self.message_box(error,'warning.png')
                        output_dict['error'] = 'Error in Coor Tools variables'
                        output_dict['sasoutput2'] = 'run failed'
                        print json.dumps( output_dict )
                        return
	
		runname=variables['runname'][0]

		if os.path.exists(runname+'/'+self.module):
			shutil.rmtree(runname+'/'+self.module)

		txtQueue=multiprocessing.JoinableQueue()
	
                process=multiprocessing.Process(target=coor_tools.extract_frames,args=(variables,txtQueue))	
		process.start()

		total_string = self.background_job(process,txtQueue,json_variables)

		#output_dict['io_string'] = input_string
		output_dict['sasoutput2'] = total_string

        if output_dict:
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
                print json.dumps( output_dict )

#	try:
#		#with open("/share/apps/genapp/sassie2/results/log","w") as outfile:
#		with open("log","w") as outfile:
#			json.dump(output_dict,outfile)
#	except:
#		output_dict['error_string'] = save_stdout
#
		
if __name__=='__main__':

	json_flag = True
	#json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"coor_tools called with no arguments\"\}\n";
# 		print 'exiting now'

	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
			#json_variables = ast.literal_eval(argv_io_string)
		a=CoorTools_Drv()
		a.run_me(json_flag,json_variables,sys.argv[1])

