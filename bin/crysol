#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,locale
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.calculate.gcrysol as gcrysol
import sassie.interface.input_filter as input_filter
import sassie.interface.crysol_filter as crysol_filter

class Crysol_Drv():

   module = 'crysol'

   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        first = True

        while process.is_alive():
                try:
                        if(first):
                                socket_dict['progress_html'] = 0.01
                                socket_dict['_progress'] = 0.01
                                socket_dict['progress_html'] = '<center>starting job</center>'
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
                        this_text = txtQueue.get(True, timeout=0.1)
                        text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                socket_dict["_textarea"] = this_text
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                total_string += this_text
                except:
                        if not process.is_alive():

                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def remove_stale_files(self):

	import glob

	filelist = ['*.alm','*.log','*.flm','*.sav','*.int','*.ans']
	directory = 'conflict_files'
	if(not os.path.isdir(directory)):
		os.system('mkdir -p '+directory)

	stale_files=[]
	mvst = 'mv -f '
	for this_file in filelist:
		local_list = [n for n in glob.glob(this_file) if os.path.isfile(n)]
		for f in local_list:	
			mvst += f+' '		
			stale_files.append(f)

	mvst += ' '+directory+'/'

	if(len(stale_files)>0):
		os.system(mvst)

	return directory,stale_files

   def run_me(self,json_flag,json_variables,input_string):

	output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

        	runname='run_0'
		dcdpath = './run_0/generate/'
		dcdfile = 'run_0.dcd'
		pdbpath = './run_0/generate/'
		pdbfile = 'c2.pdb'
		cryexe = '/share/apps/local/bin/crysol.exe'

		delafs = '1'
		option = '0'
		maxh = '15'
		fib = '17'
		maxs = '0.5'
		numpoints = '51'
		contrast = '0.03'
		edensolv = '1.0'
		hydrogens = 'N'
	
		path='./'

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
		runname = json_variables['runname']

                base_directory = json_variables['_base_directory']

                path = base_directory.replace('\/','/') + "/"

                os.chdir(path)
                path = ''

                temp_pdbfile = json_variables['pdbfile']
                pdbpath, pdbfile = os.path.split(temp_pdbfile[0])

                temp_dcdfile = json_variables['dcdfile']
                dcdpath, dcdfile = os.path.split(temp_dcdfile[0])

		maxh = json_variables['maxh']
		fib = json_variables['fib']
		maxs = json_variables['maxs']
		numpoints = json_variables['numpoints']
		contrast = json_variables['contrast']
		edensolv = json_variables['edensolv']

                delafs_list_box = json_variables['delafs_list_box']
                if(delafs_list_box == 'c1'):
                        delafs = '1' # YES
                elif(delafs_list_box == 'c2'):
                        delafs = '0' # NO

                hydrogens_list_box = json_variables['hydrogens_list_box']
                if(hydrogens_list_box == 'c1'):
                        hydrogens = 'N' # NO
                elif(hydrogens_list_box == 'c2'):
                        hydrogens = 'Y' # YES

	option = '0'
	cryexe = '/share/apps/local/bin/crysol.exe'

	svariables={}

	svariables['runname']		= (str(runname),'string')
	svariables['dcdpath']		= (str(dcdpath),'string')
	svariables['dcdfile']		= (str(dcdfile),'string')
 	svariables['pdbpath']		= (str(pdbpath),'string')
 	svariables['pdbfile']		= (str(pdbfile),'string')
 	svariables['cryexe']		= (str(cryexe),'string')

 	''' 
                 NOTE: all external variables are left as strings
                         and values are NOT filtered
 	'''
 	svariables['delafs']		= (str(delafs),'int')
 	svariables['option']		= (str(option),'string')
 	svariables['maxh']		= (str(maxh),'string')
 	svariables['fib']		= (str(fib),'string')
 	svariables['maxs']		= (str(maxs),'string')
 	svariables['numpoints']		= (str(numpoints),'string')
 	svariables['contrast']		= (str(contrast),'string')
 	svariables['edensolv']		= (str(edensolv),'string')
 	svariables['hydrogens']		= (str(hydrogens),'string')
		
	path='./'
 
 	svariables['path']    = (path,'string')

	try:
   		self.remove_stale_files()
        except:
                self.message_box(error,'skull.png')
                output_dict['error'] = 'error when trying to move existing conflict files'
                output_dict['sasoutput2'] = "conflict file types: *.alm, *.log, *.flm, *.sav, *.int, *.ans"
                print json.dumps( output_dict )
                return

	error = []
 	error,self.variables=input_filter.type_check_and_convert(svariables)

        if(len(error)>0):

                self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

                output_dict['error'] = 'Error in input variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps( output_dict )
                return
        else:
                error=crysol_filter.check_crysol(self.variables,no_file_check="true")

                if(len(error) != 0):
                        self.message_box(error,'warning.png')
                        output_dict['error'] = 'Error in crysol variables'
                        output_dict['sasoutput2'] = 'run failed'
                        output_dict['error'] = error
                        print json.dumps( output_dict )
                        return

		runname=self.variables['runname'][0]

		if os.path.exists(runname+'/'+self.module):
			try:
				shutil.rmtree(runname+'/'+self.module)
			except:
				error.append('encountered an error while attempting to remove existing runname directory')
                        	self.message_box(error,'warning.png')
                        	output_dict['error'] = error
                        	print json.dumps( output_dict )
                        	return
	
                if not os.path.exists(runname+'/sassie_log'):
                        os.system('mkdir -p '+runname+'/sassie_log')


		txtQueue=multiprocessing.JoinableQueue()

                process=multiprocessing.Process(target=gcrysol.gcrysol,args=(self.variables,txtQueue))
                process.start()

                total_string = self.background_job(process,txtQueue,json_variables)

#		output_dict['sasoutput2'] = total_string

        if total_string:
                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
#                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )

		
if __name__=='__main__':

	json_flag = True
#	json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"crysol called with no arguments\"\}\n";
# 		print 'exiting now'

	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
		a=Crysol_Drv()
		a.run_me(json_flag,json_variables,sys.argv[1])

