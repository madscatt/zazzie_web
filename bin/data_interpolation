#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,locale	
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.tools.data_interpolation as data_interpolation
import sassie.interface.input_filter as input_filter
import sassie.interface.interpolate_filter as data_interpolation_filter

class Interpolate_Drv():

   module = 'data_interpolation'

   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
	first = True

        while process.is_alive():
                try:
                        if(first):
                                socket_dict['progress_html'] = 0.01
                                socket_dict['_progress'] = 0.01
                                socket_dict['progress_html'] = '<center>starting job</center>'
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
                        this_text = txtQueue.get(True, timeout=0.1)
                        text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                socket_dict["_textarea"] = this_text
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                total_string += this_text
                except:
                        if not process.is_alive():

                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def find_min_max(self,data_file):
	nl = len(data_file)

	minx = 1E10 ; maxx = -1E10
	miny = 1E10 ; maxy = -1E10
	for i in xrange(nl):
		lin = string.split(data_file[i])
		try:
			this_x = locale.atof(lin[0])
			this_y = locale.atof(lin[1])
			if(this_x < minx) : minx = this_x
			if(this_y < miny) : miny = this_y
			if(this_x > maxx) : maxx = this_x
			if(this_y > maxy) : maxy = this_y
		except:
			pass
	
	return minx,miny,maxx,maxy

   def read_file(self,filename,this_pass):
	if True:
	#try:
		data = [] ; error = []
		data_file = open(filename,'r').readlines()
		nl = len(data_file)
		minx,miny,maxx,maxy = self.find_min_max(data_file)

		print 'minx = ',minx
		print 'maxx = ',maxx
		print 'miny = ',miny
		print 'maxy = ',maxy

		if miny < 0.0: miny = 1E-6
		if minx < 0.0: minx = 1E-6

		minx = 0.85 * minx ; maxx = 1.15 * maxx
		miny = 0.85 * miny ; maxy = 1.15 * maxy

		for i in xrange(nl):
			lin = string.split(data_file[i])
			try:
				this_x = locale.atof(lin[0])
				this_y = locale.atof(lin[1])
#				if this_y < 0:
#					this_y = 0.00001	
				if this_x > 0:
					data.append([str(this_x),str(this_y)])	
			except:
				pass
		#	error.append([this_x,this_z])	

		if(this_pass == 2):

                        self.flot_data = {
					"options": {
						"title"  : "Results",
						"xlabel"  : "q (1/angstrom)",
						"ylabel"  : "I(q)",
 						"xscale"  : "log",
						"yscale"  : "log",
						"xmin"	  : minx,
						"xmax"	  : maxx,
						"ymin"	  : miny,
						"ymax"	  : maxy,
                               		
						"legend": {
# "position" can be "ne" or "nw" or "se" or "sw"
							"position"           : "ne"
# add a margin by number of pixels
							,"margin"            : 5
# "backgroundOpacity" is a number between 0 and 1
							,"backgroundOpacity" : 0.7
# "container" puts the legend to the right of the plot
							,"container"         : "false"
# "sorted" orders the legend entries can be "ascending" or "descending"
							,"sorted"            : "ascending"
                               			}
			
					},
			
					"data" : [
                                        	{
							"lines" : { "show": "true", "lineWidth" : "1.0" },
                                        		"points" : { "show" : "true", "radius" : "1" },
                                        		"color" : "red",
							"label" : "original data",
                                        		"data": data
						}
					]
					
                                }
		else:                
                        pass_1_data = {
                                        'lines' : { 'show': 'true', 'lineWidth' : '3.0' },
                                        'points' : { 'show' : 'true' },
                                        'color' : 'green',
					'label' : 'interpolated data',
                                        'data': data
					}

                        self.flot_data["data"].append(pass_1_data)

		#data_file.close()

	#except:
	else:
		print 'ERROR READING INTERPOLATED DATA FILE'
		print 'ERROR READING INTERPOLATED DATA FILE'
		print 'ERROR READING INTERPOLATED DATA FILE'
		self.flot_data = {"error reading file and making plot"}

	return 

   def get_interpolated_data_from_disk(self,ofile,ifile):

	self.flot_data = {}
	self.read_file(ifile,2) # experimental data
	self.read_file(ofile,1) # new interpolated data

 	return 

   def run_me(self,json_flag,json_variables,input_string):

	output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

        	runname='run_0'
        	expdata = 'caw_0p6mgml.sub'
        	ofile ='caw_op6mgml.dat'
		io = '0.011'
		ioe = '0.001'
		dq = '0.01'
		maxpoints = '30'
		plotflag = '0'
        	path='./'

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
		runname = json_variables['runname']
		
		ofile = json_variables['ofile']
		io = json_variables['io']
		ioe = json_variables['ioe']
		dq = json_variables['dq']
		maxpoints = json_variables['maxpoints']

                base_directory = json_variables['_base_directory']

                path = base_directory.replace('\/','/') + "/"

                os.chdir(path)

                ofile = json_variables['ofile']
        
		expdata = json_variables['expdata'][0]
        	#head, expdata = os.path.split(temp_expdata[0])

		data_path = path

		path = ''

	plotflag = '0'

	svariables={}

	svariables['runname'] = (str(runname),'string')
        svariables['expdata']   = (str(expdata),'string')
        svariables['ofile']     = (str(ofile),'string')
        svariables['io']        = (str(io),'float')
        svariables['ioe']       = (str(ioe),'float')
        svariables['dq']        = (str(dq),'float')
        svariables['maxpoints'] = (str(maxpoints),'int')
        svariables['plotflag']  = (str(plotflag),'int')
	svariables['path']    = (path,'string')

	error,self.variables=input_filter.type_check_and_convert(svariables)

        if(len(error)>0):

                self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

                output_dict['error'] = 'Error in input variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps( output_dict )
                return
        else:
                error=data_interpolation_filter.check_interpolate(self.variables,no_file_check="true")

                if(len(error) != 0):
                        self.message_box(error,'warning.png')
                        output_dict['error'] = 'Error in data interpolation variables'
                        output_dict['sasoutput2'] = 'run failed'
                        print json.dumps( output_dict )
                        return

		runname=self.variables['runname'][0]

		if os.path.exists(runname+'/'+self.module):
			shutil.rmtree(runname+'/'+self.module)

		txtQueue=multiprocessing.JoinableQueue()

                process=multiprocessing.Process(target=data_interpolation.interpolate,args=(self.variables,txtQueue))
                process.start()

                total_string = self.background_job(process,txtQueue,json_variables)

#		output_dict['sasoutput2'] = total_string
		
		#sassie_root = '/var/www/html/sassie2/'

		self.get_interpolated_data_from_disk(data_path+runname+'/data_interpolation/'+ofile,expdata)

	#	output_dict['test_ofile'] = data_path+ofile

#		print 'flot_data = ',flot_data ; sys.stdout.flush()

#		output_dict['plot_error'] = flot_data

		#flot_data = [[[0.0,0.0],[1.0,2.0],[2.0,4.0],[3.0,9.0]]]
		if(isinstance(self.flot_data, basestring)):
			print 'error reading data'
			output_dict['plot_error'] = self.flot_data
		else:	
			output_dict['plotout4'] = self.flot_data	

        if output_dict:
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
                print json.dumps( output_dict )
		
if __name__=='__main__':

	json_flag = True
	#json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"data interpolation called with no arguments\"\}\n";
# 		print 'exiting now'

	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
		a=Interpolate_Drv()
		a.run_me(json_flag,json_variables,sys.argv[1])

