#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,locale
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.analyze.density_plot as density_plot
import sassie.interface.input_filter as input_filter
import sassie.interface.density_plot_filter as density_plot_filter

class Density_Drv():

   module = 'density_plot'

   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        first = True

        while process.is_alive():
                try:
                        if(first):
                                socket_dict['progress_html'] = 0.01
                                socket_dict['_progress'] = 0.01
                                socket_dict['progress_html'] = '<center>starting job</center>'
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
                        this_text = txtQueue.get(True, timeout=0.1)
                        text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                socket_dict["_textarea"] = this_text
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

                                total_string += this_text
                except:
                        if not process.is_alive():

                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def convert_residue_ranges(self,original_reslow,**kwargs):

        #original_reslow = str(original_reslow).strip('[]')
        original_reslow = str(original_reslow[0])
        r = string.split(original_reslow,',')
        number_of_pairs = 0
        align_flag = False
        if 'seg' in kwargs:
                align_flag = True

        lowres = ''; numcont = ''
        for pair in r:
                this_pair = string.split(pair,'-')
                if not align_flag:
                        lowres += this_pair[0]+','
                        numcont += (str(locale.atoi(this_pair[1]) - locale.atoi(this_pair[0])))+','
                elif align_flag:
                        lowres += str(this_pair[0])+','
                        numcont += str(this_pair[1])+','
                number_of_pairs += 1

        lowres = str(lowres[:-1])
        numcont = str(numcont[:-1])

        print 'lowres (convert_residue) = ',lowres
        print 'numcont (convert_residue) = ',numcont

        return lowres, numcont

   def convert_residue_low_and_high(self,residue_regions):
        residue_regions = residue_regions.split(',')

        lowres = []
        highres = []
        for residue_region in residue_regions:
                this_pair = string.split(residue_region,'-')
                lowres.append(this_pair[0])
                highres.append(this_pair[1])
        lowres = ','.join(lowres)
        highres = ','.join(highres)

        return lowres, highres

   def run_me(self,json_flag,json_variables,input_string):

	output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

        	runname='run_0'

		pdbfile = 'min3.pdb'
		dcdfile = 'run_0.dcd'
		ofile = 'test'
		#xlength = '350.0'
		#ylength = '350.0'
		#zlength = '350.0'
		box_lengths = '100.0,100.0,100.0'
		gridsp = '5.0'
		equalweights = '1'
      		weightsfile = './data/filter/x2lowweights.txt'
		save_occupancy = 'N'

		nsegments = '1'

		allsnumregions = ['5']
		residue_regions = ['1-123, 124-142, 143-354, 355-379, 380-420']
		#allslow = ['1, 124, 143, 355, 380']
		#allshigh = ['123, 142, 353, 379, 420']
		allsbasis = ['CA']
		allsname = ['GAG']
 
                segvariables = []
                for i in xrange(locale.atoi(nsegments)):
                        segvariables.append([allsnumregions[i],allslow[i],allshigh[i],allsbasis[i],allsname[i]])

        	path='./'

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
		runname = json_variables['runname']
	
                base_directory = json_variables['_base_directory']

                path = base_directory.replace('\/','/') + "/"

                os.chdir(path)

                ofile = json_variables['ofile']

                pdbfile = json_variables['pdbfile'][0]
                #head, pdbfile = os.path.split(temp_pdbfile[0])

                dcdfile = json_variables['infile'][0]
                #head, dcdfile = os.path.split(temp_dcdfile[0])

                path = ''
	
		ofile = json_variables['ofile']
		box_lengths = string.split(json_variables['box_lengths'],',')
		xlength = box_lengths[0] ; print 'xlength = ',xlength
		ylength = box_lengths[1] ; print 'ylength = ',ylength
		zlength = box_lengths[2] ; print 'zlength = ',zlength
		gridsp = json_variables['gridsp']
		nsegments = json_variables['nsegments']

                save_occupancy_list_box = json_variables['save_occupancy_list_box']
                if(save_occupancy_list_box == 'c1'):
                        save_occupancy = 'N' # NO
                elif(save_occupancy_list_box == 'c2'):
                        save_occupancy = 'Y' # YES

		try:
			weight_flag_check_box = json_variables['weight_flag_check_box']
		
                	if(weight_flag_check_box == 'off'):
                	        equalweights = '1' # YES
				weightsfile = " "
                	elif(weight_flag_check_box == 'on'):
                	        equalweights = '0' # NO
                		weightsfile = json_variables['weightsfile'][0]
                		#head, weightsfile = os.path.split(temp_weightsfile[0])
		except:
              		equalweights = '1' # YES
			weightsfile = " "
	
		allsnumregions = json_variables['nregions']
		#allslow = json_variables['lowregions']
		#allshigh = json_variables['highregions']
		allsbasis = json_variables['sbasis']
		allsname = json_variables['sname']
		residue_regions = json_variables['residue_regions']

		all_slow = [] ; all_shigh = []
                for i in xrange(locale.atoi(nsegments)):
			try:
				slow, shigh  = self.convert_residue_low_and_high(residue_regions[i])
				all_slow.append(slow) ; all_shigh.append(shigh)
			except:
 		       		error = 'unable to parse residue range for flexible regions: check your input values\n'
                		error += 'it should consist of a pair of hyphenated integers separated by commas\n'
                		error += 'the number of pairs should equal the number of flexible regions'
                		self.message_box(error,'warning.png')
                		output_dict['error'] = error
                		output_dict['sasoutput2'] = 'run failed'
                		print json.dumps( output_dict )
                		return

        	print 'all_slow (genapp) = ',all_slow ; print 'all_shigh (genapp) = ',all_shigh
		segvariables = []
                for i in xrange(locale.atoi(nsegments)):
                        segvariables.append([allsnumregions[i],all_slow[i],all_shigh[i],allsbasis[i],allsname[i]])

	svariables={}

	svariables['runname'] = (str(runname),'string')

	svariables['pdbfile']  	   = (str(pdbfile),'string')
	svariables['dcdfile']  	   = (str(dcdfile),'string')
	svariables['ofile']        = (str(ofile),'string')
	svariables['xlength']      = (str(xlength),'float')
	svariables['ylength']      = (str(ylength),'float')
	svariables['zlength']      = (str(zlength),'float')
	svariables['gridsp']       = (str(gridsp),'float')
	svariables['equalweights'] = (str(equalweights),'int')
	svariables['weightsfile']  = (str(weightsfile),'string')
	svariables['nsegments']	   = (str(nsegments),'int')
	svariables['save_occupancy']	= (str(save_occupancy),'string')
	
	svariables['path']    = (path,'string')

	error = []
	error,self.variables=input_filter.type_check_and_convert(svariables)

        if(len(error)>0):

                self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

                output_dict['error'] = 'Error in input variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps( output_dict )
                return
        else:
                error=density_plot_filter.check_density_plot(self.variables,segvariables,no_file_check="true")

                if(len(error) != 0):
                        self.message_box(error,'warning.png')
                        output_dict['error'] = 'Error in density_plot variables'
                        output_dict['sasoutput2'] = error
                        print json.dumps( output_dict )
                        return

		runname=self.variables['runname'][0]

		if os.path.exists(runname+'/'+self.module):
			shutil.rmtree(runname+'/'+self.module)

		txtQueue=multiprocessing.JoinableQueue()

		process=multiprocessing.Process(target=density_plot.density,args=(self.variables,segvariables,txtQueue))
                process.start()

                total_string = self.background_job(process,txtQueue,json_variables)

#		output_dict['sasoutput2'] = total_string


        if total_string:
                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
#                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )
		
if __name__=='__main__':

	json_flag = True
#	json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"density_plot called with no arguments\"\}\n";
# 		print 'exiting now'

	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
		a=Density_Drv()
		a.run_me(json_flag,json_variables,sys.argv[1])

