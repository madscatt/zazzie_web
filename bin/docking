#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,locale
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.interface.input_filter as input_filter
import sassie.simulate.rigid_body.docking.docking as docking

class Docking_Drv():

   module = 'docking'

   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
	first = True

        while process.is_alive():
                try:
			if(first):
                                socket_dict['progress_html'] = '<center>starting job</center>'
        			socket_dict['_progress'] = 0.01
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
			this_text = txtQueue.get(True, timeout=0.1)
			text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                socket_dict["_textarea"] = this_text
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                total_string += this_text
                except:
                        if not process.is_alive():

                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def run_me(self,json_flag,json_variables,input_string):

        print json_variables
        output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

                runname = 'run_0'
                pdbmol1 = '2HHB-A-nW.pdb'
                pdbmol2 = '2HHB-B-nW.pdb'
                r = '1.8' # parameter to derive almn and blmn
                d = '2.5' # thickness of the surface layer
                rou = '-15' # molecular 1 interior parameter
                delta = '1' # molecular 2 interior parameter
                angle_step = '50'
                eta = '1.0' # grid step size, 1.0-1.2
                N = '90' # Number of grid points
                eta_fine = '0.7' # grid step size, 0.7-0.8
                N_fine = '128'
                nMax = '10'
        
		path = ''

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
                runname = json_variables['runname']
        
                base_directory = json_variables['_base_directory']

                path = base_directory.replace('\/','/') + "/"

                os.chdir(path)

                pdbmol1 = json_variables['refpdbfile'][0]
                #head, pdbmol1 = os.path.split(temp_pdbfile[0])

                pdbmol2 = json_variables['movepdbfile'][0]
                #head, pdbmol2 = os.path.split(temp_pdbfile[0])

                try:
                        advanced_input = json_variables['advanced_input']
                except:
                        advanced_input = 'off'

                if(advanced_input == "on"):
                        r = json_variables['r']
                        d = json_variables['d']
                        rou = json_variables['rou']
                        delta = json_variables['delta']
                        eta = json_variables['eta']
                        eta_fine = json_variables['eta_fine']
                        N = json_variables['N']
                        N_fine = json_variables['N_fine']
                        angle_step = json_variables['angle_step']
                        nMax = json_variables['nMax']

                else:
                        r = '1.8' # parameter to derive almn and blmn
                        d = '2.5' # thickness of the surface layer
                        rou = '-15' # molecular 1 interior parameter
                        delta = '1' # molecular 2 interior parameter
                        angle_step = '50'
                        eta = '1.0' # grid step size, 1.0-1.2
                        N = '90' # Number of grid points
                        eta_fine = '0.7' # grid step size, 0.7-0.8
                        N_fine = '128'
                        nMax = '10'

                path = ''

	svariables={} 
	
        svariables['runname'] = (str(runname),'string')
        svariables['pdbmol1']        = (str(pdbmol1),'string')
        svariables['pdbmol2']        = (str(pdbmol2),'string')
        svariables['r']  = (str(r),'float')
        svariables['d']  = (str(d),'float')
        svariables['rou']  = (str(rou),'float')
        svariables['delta']  = (str(delta),'float')
        svariables['eta']  = (str(eta),'float')
        svariables['eta_fine']  = (str(eta_fine),'float')
        svariables['N']  = (str(N),'int')
        svariables['N_fine']  = (str(N_fine),'int')
        svariables['angle_step']  = (str(angle_step),'float')
        svariables['nMax']  = (str(nMax),'int')

        svariables['path']    = (path,'string')

	error = []
	error,self.variables=input_filter.type_check_and_convert(svariables)

        if(len(error)>0):

                self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

                output_dict['error'] = 'Error in input variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps( output_dict )
                return
        else:

		runname=self.variables['runname'][0]

                if os.path.exists(os.path.join(runname,self.module)):
                        shutil.rmtree(os.path.join(runname,self.module))

		txtQueue=multiprocessing.JoinableQueue()
                process=multiprocessing.Process(target=docking.docking,args=(self.variables,txtQueue))
		process.start()
		total_string = self.background_job(process,txtQueue,json_variables)

#		output_dict['sasoutput2'] = total_string

        if output_dict:
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
                print json.dumps( output_dict )
		
if __name__=='__main__':

	json_flag = True
	#json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"docking called with no arguments\"\}\n";
 		print 'exiting now'

	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
		a=Docking_Drv()
		a.run_me(json_flag,json_variables,sys.argv[1])

