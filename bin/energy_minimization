#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,locale
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.simulate.namd.namd_minimize as namd_minimize
import sassie.interface.input_filter as input_filter
import sassie.interface.minimize_filter as minimize_filter

class Structure_minimization_Drv():

   module = 'energy_minimization'

   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
	first = True

        while process.is_alive():
                try:
                        if(first):
                                socket_dict['progress_html'] = 0.01
                                socket_dict['_progress'] = 0.01
                                socket_dict['progress_html'] = '<center>starting job</center>'
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
                        this_text = txtQueue.get(True, timeout=0.1)
                        text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                socket_dict["_textarea"] = this_text
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                total_string += this_text
                except:
                        if not process.is_alive():

                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def run_me(self,json_flag,json_variables,input_string):

	output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

        	runname='run_0'
        	infile = 'c2.dcd'
		pdbfile = 'c2.pdb'
		nsteps = '100'
		ncpu = '1'
		psffile = 'refgag.psf'
		keepout = '1'
		dcdfreq = '20'
		md = '0'
		mdsteps = '10000'
		dielect = '1.0'
		temperature = '300.0'
		outfile = 'run_0/minimization/min_run_0.dcd'	
        	path='./'
		parmfile = '/share/apps/local/bin/toppar/par_all27_prot_na.inp'
		#topfile = '/share/apps/local/bin/toppar/top_all27_prot_na.inp'
		
		use_external_input_file = 'False'
		external_input_file = 'dum.txt'

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
		runname = json_variables['runname']

                base_directory = json_variables['_base_directory']

                path = base_directory.replace('\/','/') + "/"

                os.chdir(path)

                pdbfile = json_variables['pdbfile'][0]
                #head, pdbfile = os.path.split(temp_pdbfile[0])

		try:
			if pdbfile[-5:] == '.coor':
				cpst = 'cp '+pdbfile+' '+pdbfile[:-5]+'.pdb'
				os.system(cpst)
				pdbfile = pdbfile[:-5]+'.pdb'
		except:
			error = 'could not rename .coor file to .pdb'
			self.message_box(error,'skull.png')
			output_dict['error'] = 'pdb file name is not correct'
			output_dict['sasoutput2'] = 'pdb file name is not correct'
			print json.dumps( output_dict )
			return

		infile = json_variables['infile'][0]
		#head, infile = os.path.split(temp_infile[0])
		try:
			if infile[-5:] == '.coor':
				cpst = 'cp '+infile+' '+infile[:-5]+'.pdb'
				os.system(cpst)
				infile = infile[:-5]+'.pdb'
		except:
			error = 'could not rename .coor file to .pdb'
			self.message_box(error,'skull.png')
			output_dict['error'] = 'pdb file name is not correct'
			output_dict['sasoutput2'] = 'pdb file name is not correct'
			print json.dumps( output_dict )
			return

       		psffile = json_variables['psffile'][0]
       		#head, psffile = os.path.split(temp_psffile[0])
		
		outfile = json_variables['outfile']
		
		try:
                    nsteps = json_variables['nsteps_1']
		except:
                    try:
                        nsteps = json_variables['nsteps_2']
		    except:
                        try:
                            nsteps = json_variables['nsteps_3']
                        except:
			    nsteps = 20

		if "austin_powers" in runname:
			ncpu = runname[-2:]
			try:
				ncpu = locale.atoi(ncpu)
				if(ncpu > 64):
					error = 'nice try sherlock'
					self.message_box(error,'skull.png')
					output_dict['error'] = error
					print json.dumps( output_dict )
					return
				
			except:
				ncpu = json_variables['ncpu']
		else:
			ncpu = json_variables['ncpu']
		
		try:	
			dcdfreq = json_variables['dcdfreq']
		except:
			dcdfreq = nsteps

		#head, psffile = os.path.split(temp_psffile[0])

		keepout_list_box = json_variables['keepout_list_box']
                if(keepout_list_box == 'c1'):
                        keepout = '0' # NO
                elif(keepout_list_box == 'c2'):
                        keepout = '1' # YES

		use_external_input_file = 'False'
		external_input_file = 'dum.txt'
		velocity_restart_file = "False"
		extended_system_restart_file = "False"

		md_list_box = json_variables['md_list_box']
                if(md_list_box == 'c1'):
                        md = '0' #  minimization only
			mdsteps = '0'
			dielect = '1.0'
			temperature = '300.0'
                elif(md_list_box == 'c2'):
                        md = '1' #  min / md
			mdsteps = json_variables['mdsteps_1']
			dielect = json_variables['dielect_1']
			temperature = json_variables['temperature_1']
                elif(md_list_box == 'c3'):
                        md = '2' #  min / md /min
			mdsteps = json_variables['mdsteps_2']
			dielect = json_variables['dielect_2']
			temperature = json_variables['temperature_2']

                elif(md_list_box == 'c4'):
                        use_external_input_file = "True"
                        external_input_file = json_variables['external_input_file'][0]
                	### following are dummy variables and not used        
			md = '0' #  minimization only
			mdsteps = '0'
			dielect = '1.0'
			temperature = '300.0'
			try:	
				additional_files = json_variables['additional_files']
			except:
				additional_files = 'off'
		
			if(additional_files == "on"):
				try:
					velocity_restart_file = json_variables['velocity_restart_file'][0]	
				except:
					pass

				try:
					extended_system_restart_file = json_variables['extended_system_restart_file'][0]	

				except:
					pass

                try:
                        advanced_input = json_variables['advanced_input']
                except:
                        advanced_input = 'off'

                if(advanced_input == "on"):

                	#if(json_variables['top_list_box'] == "c1"):
                        #	temp_topfile = json_variables['topfile']
                        #	head, topfile = os.path.split(temp_topfile[0])
                	#elif(json_variables['top_list_box'] == "c2"):
                        #	topfile = json_variables['topfile_text']

                        number_of_parameter_files = json_variables['number_of_parameter_files'][0]
		        if number_of_parameter_files == '0':	
                            parmfile = '/share/apps/local/bin/toppar/par_all27_prot_na.inp'
                        else: 
                            parmfile = ''
                            for i in xrange(locale.atoi(number_of_parameter_files)):   
                                parmfile += ',' + (str(json_variables['parmfile'][i][0]))
                            parmfile = parmfile[1:]
		else:
			#topfile = '/share/apps/local/bin/toppar/top_all27_prot_na.inp'
			parmfile = '/share/apps/local/bin/toppar/par_all27_prot_na.inp'

		path = ''

	#parmfile = '/share/apps/local/bin/toppar/par_all27_prot_na.inp'
	
	svariables={}

	svariables['runname'] = (str(runname),'string')
	
	svariables['infile']		= (str(infile),'string')
	svariables['pdbfile']		= (str(pdbfile),'string')
	svariables['outfile']		= (str(outfile),'string')
	svariables['nsteps']		= (str(nsteps),'int')
	svariables['parmfile']		= (str(parmfile),'string')
	svariables['psffile']		= (str(psffile),'string')
	svariables['ncpu']		= (str(ncpu),'int')

	svariables['keepout']		= (str(keepout),'int')
	svariables['dcdfreq']		= (str(dcdfreq),'int')
	svariables['infiletype']	= ('dcd','string')
	svariables['md']		= (str(md),'int')
	svariables['mdsteps']		= (str(mdsteps),'int')
	svariables['dielect']		= (str(dielect),'float')
	svariables['temperature']	= (str(temperature),'float')
	
	svariables['use_external_input_file']	= (str(use_external_input_file),'boolean')
	svariables['external_input_file']	= (str(external_input_file),'string')
		
	svariables['velocity_restart_file']	= (str(velocity_restart_file),'string')
	svariables['extended_system_restart_file'] = (str(extended_system_restart_file),'string')
	#svariables['topfile']		= (str(topfile),'string')
	
	svariables['path']    = (str(path),'string')
	
	error = []
	error,self.variables=input_filter.type_check_and_convert(svariables)

        if(len(error)>0):

                self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

                output_dict['error'] = 'Error in input variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps( output_dict )
                return
        else:
		error=minimize_filter.check_minimize(self.variables,no_file_check="true")
                if(len(error) != 0):
                        self.message_box(error,'warning.png')
                        output_dict['error'] = 'Error in minimization variables'+str(error[0])
                        output_dict['sasoutput2'] = 'run failed'
                        print json.dumps( output_dict )
                        return
	
		runname=self.variables['runname'][0]

		if os.path.exists(runname+'/'+self.module):
			shutil.rmtree(runname+'/'+self.module)

		txtQueue=multiprocessing.JoinableQueue()
		process=multiprocessing.Process(target=namd_minimize.minimize,args=(self.variables,txtQueue))
                process.start()

                total_string = self.background_job(process,txtQueue,json_variables)
		
#		output_dict['sasoutput2'] = total_string

        #if output_dict:
	if total_string:
                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
#                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )

if __name__=='__main__':

	json_flag = True
	#json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"energy minimization called with no arguments\"\}\n";
# 		print 'exiting now'

	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
		a=Structure_minimization_Drv()
		a.run_me(json_flag,json_variables,sys.argv[1])

