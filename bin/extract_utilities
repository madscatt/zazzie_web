#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,ast,locale
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.tools.extract_utilities as extract_utilities
import sassie.interface.input_filter as input_filter
import sassie.interface.extract_utilities_filter as extract_utilities_filter

class Extract_Utilities_Driver():

   module = 'extract_utilities'

   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
	first = True

        while process.is_alive():
                try:
                        if(first):
                                socket_dict['progress_html'] = 0.01
                                socket_dict['_progress'] = 0.01
                                socket_dict['progress_html'] = '<center>starting job</center>'
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
                        this_text = txtQueue.get(True, timeout=0.1)
                        text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                socket_dict["_textarea"] = this_text
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                total_string += this_text
                except:
                        if not process.is_alive():
                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def run_me(self,json_flag,json_variables,input_string):

	output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

        	runname='run_0'
        	pdb_filename ='min3.pdb'
        	trajectory_filename = 'c7.dcd'
        	option ='single_frame'
        	value = '6'
		output_filename = 'output.dcd'
		extract_trajectory = True
		extract_sas = False
		path = './'

		sas_type = '1'
		number_of_sas_paths = '1'
		sas_paths = 'run_0/xtal2sas'

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
		runname = json_variables['runname']

		base_directory = json_variables['_base_directory']

        	path = base_directory.replace('\/','/') + "/"

		os.chdir(path)
	
		extract_trajectory = False
		extract_sas = False

	        try:
                        trajectory_checkbox = json_variables['trajectory_checkbox']
                except:
                        trajectory_checkbox = 'off'
                try:
                        sas_checkbox = json_variables['sas_checkbox']
                except:
                        sas_checkbox = 'off'	

		if trajectory_checkbox == "on":	

        		pdb_filename = json_variables['pdb_filename'][0]
        		trajectory_filename = json_variables['trajectory_filename'][0]

			extract_trajectory = True 
		
			output_filename = json_variables['output_filename']
		else:
        		pdb_filename = ''
        		trajectory_filename = ''
			output_filename = ''

		if sas_checkbox == "on":	
			extract_sas = True 

			sas_option_list_box = json_variables['sas_type_list_box']
			if(sas_option_list_box == 'c1'):
				sas_type = '0'
			elif(sas_option_list_box == 'c2'):
				sas_type = '1'
			elif(sas_option_list_box == 'c3'):
				sas_type = '2'
			elif(sas_option_list_box == 'c4'):
				sas_type = '3'
                        number_of_sas_paths = json_variables['number_of_sas_paths'][0]
                        sas_paths = ''
                        for i in xrange(int(number_of_sas_paths)):
			    this_sas_path = json_variables['sas_paths'][i]
                            sas_paths += str(this_sas_path[0]) + ','
                        sas_paths = sas_paths[:-1]

		else:
			sas_paths = 'None'
			sas_type = '1'

		path = ''
	
		option_list_box = json_variables['option_list_box']
                if(option_list_box == 'c1'):
                        option = 'single_frame'
			value = json_variables['local_value_c1']
                elif(option_list_box == 'c2'):
                        option = 'range'
			value = json_variables['local_value_c2']
                elif(option_list_box == 'c3'):
                        option = 'text_file'
        		temp_option = json_variables['local_value_c3']
			#head, value = os.path.split(temp_option[0])
			value = temp_option[0]
                elif(option_list_box == 'c4'):
                        option = 'weight_file'
        		temp_option = json_variables['local_value_c4']
			value = temp_option[0]
                elif(option_list_box == 'c5'):
                        option = 'sampling_frequency'
        		value = json_variables['sampling_frequency']
                elif(option_list_box == 'c6'):
                        option = 'all'
			value = 1

	svariables={}

	svariables['runname'] = (str(runname),'string') 		# prefix to name output files
	svariables['path'] = (str(path),'string') 			# input file paths
	svariables['pdb_filename'] = (str(pdb_filename),'string') 	# name of input PDB
	svariables['trajectory_filename'] = (str(trajectory_filename),'string') 		# name of input PDB or DCD file	
	svariables['option'] = (str(option),'string')		# option: single_frame, range, text_file, weight_file, sampling_frequency, or all
	svariables['local_value'] = (str(value),'string') 		#frame number, range, text/weight filename	
	svariables['output_filename'] = (str(output_filename),'string')  	# name of output file (type determined by suffix)

	svariables['extract_trajectory'] = (str(extract_trajectory),'boolean')  	# flag to extract structures
	svariables['extract_sas'] = (str(extract_sas),'boolean')  	# flag to extract sas
	svariables['sas_type']   = (str(sas_type),'int')
	svariables['sas_paths']   = (str(sas_paths),'string')	

	error,variables=input_filter.type_check_and_convert(svariables)

        if(len(error)>0):

                self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

                output_dict['error'] = 'Error in input variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps( output_dict )
                return
        else:
		error=extract_utilities_filter.check_extract_utilities(variables,no_file_check="true")

                if(len(error) != 0):
                        self.message_box(error,'warning.png')
                        output_dict['error'] = 'Error in Extract Utilities variables'
                        output_dict['sasoutput2'] = 'run failed'
                        print json.dumps( output_dict )
                        return
	
		runname=variables['runname'][0]

		#if os.path.exists(runname+'/'+self.module):
		#	shutil.rmtree(runname+'/'+self.module)
		if not os.path.exists(runname+'/'+self.module):
			os.makedirs(runname+'/'+self.module)

		txtQueue=multiprocessing.JoinableQueue()
	
                process=multiprocessing.Process(target=extract_utilities.extract_data,args=(variables,txtQueue))	
		process.start()
	
		total_string = self.background_job(process,txtQueue,json_variables)

	#	output_dict['sasoutput2'] = total_string


        if total_string:
                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
#                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )

		
if __name__=='__main__':

	json_flag = True
	#json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"extract utilities called with no arguments\"\}\n";
# 		print 'exiting now'
		
	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
			#json_variables = ast.literal_eval(argv_io_string)
		a=Extract_Utilities_Driver()
		a.run_me(json_flag,json_variables,sys.argv[1])

