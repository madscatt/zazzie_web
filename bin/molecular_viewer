#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,ast
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.interface.input_filter as input_filter

class Mol_Drv():

   module = 'molecular_viewer'


   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
             socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        first = True

        while process.is_alive():
                try:
                        if(first):
                                socket_dict['progress_html'] = '<center>starting job</center>'
                                socket_dict['_progress'] = 0.01
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
                        this_text = txtQueue.get(True, timeout=0.01)
                        text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                socket_dict["_textarea"] = this_text
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                total_string += this_text
                except:
                        if not process.is_alive():

                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def run_me(self,json_flag,json_variables,input_string):

	output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

        	runname='run_0'
        	refpdb ='min3.pdb'
        	path='./'

		UDP_IP = '127.0.0.1'
		UDP_PORT = 5005

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
#		runname = json_variables['runname']

	#	output_dict['base_directory'] = json_variables['_base_directory']
		#output_dict['logon'] = json_variables['_logon']
	#	output_dict['project'] = json_variables['_project']

		base_directory = json_variables['_base_directory']

        	path = base_directory.replace('\/','/') + "/"

		os.chdir(path)
		pdb_path = path

                refpdb = json_variables['refpdb'][0]
                head,pdbfilename= os.path.split(refpdb)
                print 'refpdb = ',refpdb

                path = ''

		UDP_IP = json_variables['_udphost']
		UDP_PORT = json_variables['_udpport']

	svariables={}

	runname = 'run_0'

	svariables['runname'] = (str(runname),'string')
	svariables['refpdb']  = (str(refpdb),'string')
	svariables['path']    = (path,'string')

	error,self.variables=input_filter.type_check_and_convert(svariables)

	if(len(error)>0):
		output_dict['error'] = 'Error in input variables'	
		output_dict['sasoutput1'] = 'run failed'
	else:
		runname=self.variables['runname'][0]

		output_dict['outputpdb'] = refpdb
		#output_dict['outputpdb'] = pdb_path+'c.cube'

        if output_dict:
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
                print json.dumps( output_dict )
		
if __name__=='__main__':

	json_flag = True
	#json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"molecular viewer called with no arguments\"\}\n";
# 		print 'exiting now'

	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
			#json_variables = ast.literal_eval(argv_io_string)
		a=Mol_Drv()
		a.run_me(json_flag,json_variables,sys.argv[1])

