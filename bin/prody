#!/share/apps/local/anaconda/bin/python

'''
    #!/share/apps/local/bin/python/bin/python
'''

import json,sys,os,shutil,locale
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.simulate.prody.prody_anm as prody_anm
import sassie.interface.input_filter as input_filter
import sassie.interface.prody_filter as prody_filter

class PRODY():

    module = 'prody'

    def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                             socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

    def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                             socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        first = True

        while process.is_alive():
            try:
                if(first):
                    socket_dict['progress_html'] = '<center>starting job</center>'
                    socket_dict['_progress'] = 0.01
                    doc_string = json.dumps(socket_dict)
                    sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                    first = False
                this_text = txtQueue.get(True, timeout=0.01)
                text_split=string.split(this_text)
                if(text_split[0]=='STATUS'):
                    value = locale.atof(text_split[1])
                    svalue = str(round(100*value,2))
                    socket_dict['progress_output'] = value
                    socket_dict['_progress'] = value
                    socket_dict['progress_html'] = '<center>'+svalue+'</center>'

                    if "_textarea" in socket_dict:
                        del socket_dict["_textarea"]
                    if socket_dict:
                        doc_string = json.dumps(socket_dict)
                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                else:
                    socket_dict["_textarea"] = this_text
                    if socket_dict:
                        doc_string = json.dumps(socket_dict)
                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                    total_string += this_text
            except:
                if not process.is_alive():

                    return total_string

            time.sleep(0.01)
        else:
            return total_string

        return total_string

    def run_me(self,json_flag,json_variables,input_string):

        output_dict = {}

        if not json_flag:


		# BEGIN USER EDIT
		# BEGIN USER EDIT
		# BEGIN USER EDIT

		runname = 'run_0'
		pdbfile = 'hivr.pdb'
		number_modes = '5'  # number of normal modes to compute
		number_conformations_samp = '50'  # number of conformations to generate by random sampling of modes
		number_steps_traverse = '10'  # number of steps to tranverse each mode in both diretcions
		rmsd_conformations_samp = '1.0'  # average RMSD of randomly sampled conformations with respect to initial conformation
		rmsd_traverse = '1.5'  # maximum RMSD of conformations for trajectory from traversed mode with respect to initial conformation
		advanced_usage = '0'  # advanced usage option: 0=no; 1=yes
		advanced_usage_cmd = ' '  # user supplied ProDy command if advanced_usage=1

            #### END USER EDIT
            #### END USER EDIT
            #### END USER EDIT

        else:
		runname = json_variables['runname']

		base_directory = json_variables['_base_directory']

		path = base_directory.replace('\/','/') + "/"

		os.chdir(path)
		data_path = path

		pdbfile = json_variables['pdbfile'][0]

		number_modes = json_variables['number_modes']
		number_conformations_samp = json_variables['number_conformations_samp']
		number_steps_traverse = json_variables['number_steps_traverse']
		rmsd_conformations_samp = json_variables['rmsd_conformations_samp']
		rmsd_traverse = json_variables['rmsd_traverse']

		try:
			advanced_input = json_variables['advanced_input']
		except:
			advanced_input = 'off'
			advanced_usage = "0"	
                
		if(advanced_input == "on"):
			advanced_usage_cmd = json_variables['advanced_usage_cmd']
		else:	
			advanced_usage_cmd = ''

        svariables={}

	svariables['runname'] = (runname, 'string')
	svariables['pdbfile'] = (pdbfile, 'string')

	svariables['number_modes'] = (number_modes, 'int')
	svariables['number_conformations_samp'] = (number_conformations_samp, 'int')
	svariables['number_steps_traverse'] = (number_steps_traverse, 'int')
	svariables['rmsd_conformations_samp'] = (rmsd_conformations_samp, 'float')
	svariables['rmsd_traverse'] = (rmsd_traverse, 'float')
	svariables['advanced_usage'] = (advanced_usage, 'int')
	svariables['advanced_usage_cmd'] = (advanced_usage_cmd, 'string')

        error = []

        error,self.variables=input_filter.type_check_and_convert(svariables)

	if(len(error)>0):

		self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

		output_dict['error'] = 'Error in input variables'
		output_dict['sasoutput2'] = error
		print json.dumps( output_dict )
		return
	else:
		error = []
                error = prody_filter.check_prody(self.variables)

		if(len(error) != 0):
			self.message_box(error,'warning.png')
			output_dict['error'] = 'Error in prody variables'
			output_dict['sasoutput2'] = error
			print json.dumps( output_dict )
			return

		else:
			runname=self.variables['runname'][0]

			if os.path.exists(runname+'/'+self.module):
				shutil.rmtree(runname+'/'+self.module)

			txtQueue=multiprocessing.JoinableQueue()
			simulation = prody_anm.simulation()
			process=multiprocessing.Process(target=simulation.main,args=(self.variables,txtQueue))
			process.start()
	
			total_string = self.background_job(process,txtQueue,json_variables)

	if total_string:
		print json.dumps( total_string )
	else:
		error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
		output_dict['error'] = error_string
            	print json.dumps( output_dict )


if __name__=='__main__':

    json_flag = True
#    json_flag = False

    if (len(sys.argv) < 1):
        print "\{\"error\":\"prody called with no arguments\"\}\n";
# 		print 'exiting now'

    elif len(sys.argv) > 1:
        json_variables = " "
        if(json_flag):
            argv_io_string = StringIO(sys.argv[1])
            json_variables = json.load(argv_io_string)
        a=PRODY()
        a.run_me(json_flag,json_variables,sys.argv[1])
