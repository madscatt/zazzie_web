#!/share/apps/local/bin/python/bin/python
import json
import sys
import os
import shutil
import locale
from StringIO import StringIO
import multiprocessing
import time
import string
import socket

import sassie.interface.input_filter as input_filter
import sassie.interface.sct_anal_filter as sct_filter
import sassie.analyze.gsct_anal as gsct_anal

class SCTAnal_Drv():

    module = 'sct_analyze'

    def message_box(self, text, icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET,  # Internet
                             socket.SOCK_DGRAM)  # UDP

        socket_dict = {}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string, (UDP_IP, UDP_PORT))

        return

    def background_job(self, process, txtQueue, json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET,  # Internet
                             socket.SOCK_DGRAM)  # UDP

        socket_dict = {}
        socket_dict['_uuid'] = json_variables['_uuid']
        first = True

        while process.is_alive():
            try:
                if(first):
                    socket_dict['progress_html'] = 0.01
                    socket_dict['_progress'] = 0.01
                    socket_dict[
                        'progress_html'] = '<center>starting job</center>'
                    doc_string = json.dumps(socket_dict)
                    sock.sendto(doc_string, (UDP_IP, UDP_PORT))
                    first = False
                this_text = txtQueue.get(True, timeout=0.1)
                text_split = string.split(this_text)
                if(text_split[0] == 'STATUS'):
                    value = locale.atof(text_split[1])
                    svalue = str(round(100 * value,2))
                    socket_dict['progress_output'] = value
                    socket_dict['_progress'] = value
                    socket_dict['progress_html'] = '<center>' + \
                        svalue + '</center>'
                    if "_textarea" in socket_dict:
                        del socket_dict["_textarea"]
                    if socket_dict:
                        doc_string = json.dumps(socket_dict)
                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                else:
                    socket_dict["_textarea"] = this_text
                    if socket_dict:
                        doc_string = json.dumps(socket_dict)
                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                    total_string += this_text
            except:
                if not process.is_alive():

                    return total_string

            time.sleep(0.01)
        else:
            return total_string

        return total_string

    def run_me(self, json_flag, json_variables, input_string):

        output_dict = {}

        if not json_flag:

            # BEGIN USER EDIT
            # BEGIN USER EDIT
            # BEGIN USER EDIT

            runname = 'run_0'
            sct_calc_dir = './'
            paramfile = './params.yml'
            xrayfiles = ['x_1.dat','x_2.dat']
            xrayunits = 'a'
            neutronfiles = ['n.dat']
            neutfiles = ['n.dat']
            neutronunits = 'a'
            neutunits = 'a'
            chi2 = '0'
            path = './'

            # END USER EDIT
            # END USER EDIT
            # END USER EDIT

        else:
            runname = json_variables['runname']

            base_directory = json_variables['_base_directory']

            path = base_directory.replace('\/', '/') + "/"

            os.chdir(path)

            #sct_calc_dir = os.path.join(base_directory,runname,'sct_calc')
            sct_calc_dir = json_variables['calcpath'][0]

            paramfile = json_variables['paramfile'][0]
            #head,paramfile = os.path.split(temp_paramfile[0])

            xrayfiles = []
	    if int(json_variables['noxray'][0]) > 0:
                for xfile in json_variables['xraycurve']:
                    xrayfiles.append(xfile[0])

            if(json_variables['xrayunits'] == 'c2'):
                xrayunits = 'nm'
            else:
                xrayunits = 'a'

            neutfiles = []
	    if int(json_variables['noneutron'][0]) > 0:
                for xfile in json_variables['neutroncurve']:
                    neutfiles.append(xfile[0])

            if(json_variables['neutronunits'] == 'c2'):
                neutunits = 'nm'
            else:
                neutunits = 'a'

            if(json_variables['metric_box'] == 'c2'):
                chi2 = '1'
            else:
                chi2 = '0'

            path = ''

        svariables = {}
        svariables['runname'] = (runname,'string')
        svariables['sct_calc_dir'] = (sct_calc_dir,'string')
        svariables['paramfile'] = (paramfile,'string')
        svariables['xrayfiles'] = (xrayfiles, 'string')
        svariables['neutfiles'] = (neutfiles, 'string')
        svariables['xrayunits'] = (xrayunits, 'string')
        svariables['neutunits'] = (neutunits, 'string')
        svariables['chi2'] = (chi2, 'int')

        if len(neutfiles) > 0:
            if len(xrayfiles) > 0:
                svariables['model_type'] = ('both', 'string')
            else:
                svariables['model_type'] = ('neutron', 'string')
        elif len(xrayfiles) > 0:
            svariables['model_type'] = ('xray', 'string')

        error,self.variables = input_filter.type_check_and_convert(svariables)

        if error:

        #    self.message_box(error, 'skull.png')
#               warning.png, information.png, skull.png, toast.png

            output_dict['error'] = 'Error in input variables'
            output_dict['sasoutput2'] = 'run failed'
            print 'error = ',error

            print json.dumps(output_dict)
            return
        else:
            error = sct_filter.check_sct(self.variables)

            if error:
        #        self.message_box(error, 'warning.png')
                output_dict['error'] = 'Error in sctanal variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps(output_dict)
                print error
                return

            runname = self.variables['runname'][0]
                
            if os.path.exists(runname + '/' + self.module):
                shutil.rmtree(runname + '/' + self.module)

            txtQueue = multiprocessing.JoinableQueue()
            
            process=multiprocessing.Process(
                target=gsct_anal.gsct_anal,
                args=(self.variables,txtQueue))
                
            process.start()
            
            total_string = self.background_job(
                process,
                txtQueue,
                json_variables)
                
            #output_dict['sasoutput2'] = total_string

        if total_string:
                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
#                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )

if __name__ == '__main__':

	json_flag = True
	#json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"sct_analyze called with no arguments\"\}\n"

	elif len(sys.argv) > 1:
		json_variables = " "
	if(json_flag):
		argv_io_string = StringIO(sys.argv[1])
		json_variables = json.load(argv_io_string)
	a = SCTAnal_Drv()
	a.run_me(json_flag, json_variables, sys.argv[1])
