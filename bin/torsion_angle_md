#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,time,locale
from StringIO import StringIO
import multiprocessing,string,socket

import sassie.simulate.torsion_angle_md.torsion_angle_md as torsion_angle_md
import sassie.interface.torsion_angle_md_filter as torsion_angle_md_filter
import sassie.interface.input_filter as input_filter

class Tamd_Drv():

   module = 'torsion_angle_md'

   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
	first = True

        while process.is_alive():
                try:
                        if(first):
                                socket_dict['progress_html'] = 0.01
                                socket_dict['_progress'] = 0.01
                                socket_dict['progress_html'] = '<center>starting job</center>'
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
                        this_text = txtQueue.get(True, timeout=0.1)
                        text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['_progress'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                socket_dict["_textarea"] = this_text
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                total_string += this_text
                except:
                        if not process.is_alive():

                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def convert_residue_ranges(self,original_reslow):

        r = string.split(original_reslow,',')
        number_of_pairs = 0

        lowres = ''; numcont = ''
        for pair in r:
                this_pair = string.split(pair,'-')
                lowres += this_pair[0]+','
                numcont += (str(locale.atoi(this_pair[1]) - locale.atoi(this_pair[0])))+','
                number_of_pairs += 1

        lowres = lowres[:-1]
        numcont = numcont[:-1]

        print 'lowres = ',lowres
        print 'numcont = ',numcont

        return lowres, numcont

   def run_me(self,json_flag,json_variables,input_string):

	output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

		runname		= 'run_2'
		infile		= 't.pdb'
		pdbfile		= 't.pdb'
		outfile		= 'test.dcd'
		nsteps		= '200' 
		
		topfile		= '/share/apps/local/bin/toppar/top_all27_prot_na.inp'
		parmfile	= '/share/apps/local/bin/toppar/par_all27_prot_na.inp'
		keepout		= '1'
		dcdfreq		= '20'
		charmmexe	= '/share/apps/local/bin/charmm.exe'
		temperature	= '300.0'
		rgforce		= '0.0'
		rgvalue		= '0.0'
	
		dna_segnames	= ""

		number_flexible_segments = '1'

		pretamd_min_steps = '100'
		poll_frequency = '10'

		all_flexible_segnames=['PEP1']
		all_snumranges=['1']
		all_srlow=['2']
		all_srnum=['4']
		all_moltype=['protein']

                psegvariables = []
                for i in xrange(locale.atoi(number_flexible_segments)):
                        psegvariables.append([all_flexible_segnames[i],all_snumranges[i],all_srlow[i],all_srnum[i],all_moltype[i]])

	
        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
		runname = json_variables['runname']
	
                base_directory = json_variables['_base_directory']

                path = base_directory.replace('\/','/') + "/"

                os.chdir(path)

                pdbfile = json_variables['pdbfile'][0]

                infile = json_variables['infile'][0]

		outfile = json_variables['outfile']
		nsteps = json_variables['nsteps']

		temperature = json_variables['temperature']
		number_flexible_segments = json_variables['number_flexible_segments']
		pretamd_min_steps = json_variables['pretamd_min_steps']
		try:	
			poll_frequency = json_variables['poll_frequency']
		except:	
			poll_frequency = '10'
		rgforce = json_variables['rgforce']
		rgvalue = json_variables['rgvalue']

		topfile         = '/share/apps/local/bin/toppar/top_all27_prot_na.inp'
                parmfile        = '/share/apps/local/bin/toppar/par_all27_prot_na.inp'
		charmmexe	= '/share/apps/local/bin/charmm.exe'

		if(json_variables['keepout_checkbox'] == "on"):
			keepout = "1"
		else:
			keepout = "0"

		try:
			if(json_variables['dna_checkbox'] == "on"):
				dna_segnames = json_variables['dna_segnames']
 		except:
			dna_segnames = ''

                all_flexible_segnames=	json_variables['all_flexible_segnames']
                all_flexible_segnames=	json_variables['all_flexible_segnames']
                all_snumranges=	json_variables['all_snumranges']

                all_moltype=	json_variables['all_moltype']

                psegvariables = []
                for i in xrange(locale.atoi(json_variables['number_flexible_segments'])):
                        if(all_moltype[i] == "c1"):
                                mtype = "protein"
                        elif(all_moltype[i] == "c2"):
                                mtype = "dna"
                        elif(all_moltype[i] == "c3"):
                                mtype = "rna"

                        try:
                        #if True:
                                original_srlow = json_variables['residue_ranges'][i]
                                srlow, srnum = self.convert_residue_ranges(original_srlow)
                        #else:
                        except:
                                error = 'unable to parse residue range for flexible regions: check your input values\n'
                                error += 'it should consist of a pair of hyphenated integers separated by commas\n'
                                error += 'the number of pairs should equal the number of flexible regions'
                                self.message_box(error,'warning.png')
                                output_dict['error'] = error
                                output_dict['sasoutput2'] = 'run failed'
                                print json.dumps( output_dict )
                                return

                       	psegvariables.append([all_flexible_segnames[i],all_snumranges[i],srlow,srnum,mtype])


                try:
                        advanced_input = json_variables['advanced_input']
                except:
                        advanced_input = 'off'

                if(advanced_input == "on"):
                	try:
                		trajectory_check_box = json_variables['trajectory_check_box']
                	except:
                        	trajectory_check_box = 'off'

                	if(trajectory_check_box == "on"):

				dcdfreq = json_variables['dcdfreq']
			else:
				dcdfreq = nsteps 

                else:
			dcdfreq = nsteps 


	path = ''
	svariables={}

	svariables['runname'] 		= (str(runname),'string')
	svariables['infile']		= (str(infile),'string')
	svariables['pdbfile']		= (str(pdbfile),'string')
	svariables['outfile']		= (str(outfile),'string')
	svariables['nsteps']		= (str(nsteps),'int')
	svariables['topfile']		= (str(topfile),'string')
	svariables['parmfile']		= (str(parmfile),'string')
	svariables['keepout']		= (str(keepout),'int')
	svariables['dcdfreq']		= (str(dcdfreq),'int')
	svariables['charmmexe']		= (str(charmmexe),'string')
	svariables['temperature']	= (str(temperature),'float')
	svariables['rgforce']		= (str(rgforce),'float')
	svariables['rgvalue']		= (str(rgvalue),'float')

	svariables['dna_segnames']	= (str(dna_segnames),'string')
			
	svariables['number_flexible_segments']	= (str(number_flexible_segments),'int')
	svariables['pretamd_min_steps']	= (str(pretamd_min_steps),'string')
	svariables['poll_frequency']	= (str(poll_frequency),'float')
	
	svariables['path']    = (str(path),'string')
	
	error = []
	error,self.variables=input_filter.type_check_and_convert(svariables)

        if(len(error)>0):

                self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

                output_dict['error'] = 'Error in input variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps( output_dict )
                return
        else:
                error=torsion_angle_md_filter.check_torsion_angle_md(self.variables,psegvariables)
		print 'error = ',error ; sys.stdout.flush()
                if(len(error) != 0):
                        self.message_box(error,'warning.png')
                        output_dict['error'] = 'Error in torsion_angle_md variables'
                        output_dict['sasoutput2'] = 'run failed'
                        print json.dumps( output_dict )
                        return

		runname=self.variables['runname'][0]

		if os.path.exists(runname+'/'+self.module):
			shutil.rmtree(runname+'/'+self.module)


		txtQueue=multiprocessing.JoinableQueue()
		process=multiprocessing.Process(target=torsion_angle_md.tamd,args=(self.variables,psegvariables,txtQueue))

		process.start()
		total_string = 'starting self.background_job' 
		print "total_string = ",total_string	
		total_string = self.background_job(process,txtQueue,json_variables)

#		output_dict['sasoutput2'] = total_string

        if total_string:
                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
#                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )

if __name__=='__main__':

	json_flag = True
	#json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"torsion angle md called with no arguments\"\}\n";
# 		print 'exiting now'

	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
		a=Tamd_Drv()
		a.run_me(json_flag,json_variables,sys.argv[1])

