#!/share/apps/local/bin/python/bin/python
import json,sys,os,shutil,locale
from StringIO import StringIO
import multiprocessing,time,string,socket

import sassie.simulate.rigid_body.two_body_grid.two_body_grid as two_body_grid
import sassie.interface.input_filter as input_filter

class TwoBodyGrid_Drv():

   module = 'two_body_grid'

   def message_box(self,text,icon):

        _message = {}
        _message['icon'] = icon
        _message['text'] = text

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
        socket_dict['_message'] = _message

        doc_string = json.dumps(socket_dict)
        sock.sendto(doc_string,(UDP_IP,UDP_PORT))

        return

   def background_job(self,process,txtQueue,json_variables):

        total_string = ''

        UDP_IP = json_variables['_udphost']
        UDP_PORT = json_variables['_udpport']
        sock = socket.socket(socket.AF_INET, # Internet
                socket.SOCK_DGRAM) # UDP

        socket_dict={}
        socket_dict['_uuid'] = json_variables['_uuid']
	first = True

        while process.is_alive():
                try:
                        if(first):
                                socket_dict['progress_html'] = 0.01
                                socket_dict['progress_html'] = '<center>starting job</center>'
                                doc_string = json.dumps(socket_dict)
                                sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                first = False
                        this_text = txtQueue.get(True, timeout=0.1)
                        text_split=string.split(this_text)
                        if(text_split[0]=='STATUS'):
                                value = locale.atof(text_split[1])
                                svalue = str(round(100*value,2))
                                socket_dict['progress_output'] = value
                                socket_dict['progress_html'] = '<center>'+svalue+'</center>'
                                if "_textarea" in socket_dict:
                                        del socket_dict["_textarea"]
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                        else:
                                socket_dict["_textarea"] = this_text
                                if socket_dict:
                                        doc_string = json.dumps(socket_dict)
                                        sock.sendto(doc_string,(UDP_IP,UDP_PORT))
                                total_string += this_text
                except:
                        if not process.is_alive():

                                return total_string

                time.sleep(0.01)
        else:
                return total_string

        return total_string

   def run_me(self,json_flag,json_variables,input_string):

	output_dict = {}

	if not json_flag:

        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT
        	#### BEGIN USER EDIT

        	runname = 'run_0'
		pdbfile1 = 'iase1.pdb'
		pdbfile2 = 'iase2.pdb'
		ofile = 'output.dcd'
		accpos = '0'
		pos = '-20,-20,-20'
		trans = '5,5,5'
		dtrans = '20,20,20'
		theta = '4,4,4'
		dtheta = '45,45,45'
		basis = 'CA'
		cutoff = '3.0'
		lowrg = '0.0'
		highrg = '400.0'
		zflag = '0'
		zcutoff = '0.0'
		cflag = '0'
		confile = 'constraints.txt'
		nexsegments1 = '3'
		nsegments1 = 'INT1,INT2,LED1'
		reslow1 = '271,271,94'
		numcont1 = '18,18,31'
		nexsegments2 = '3'
		nsegments2 = 'INT3,INT4,LED2'
		reslow2 = '271,271,94'
		numcont2 = '18,18,31'

        	path='./'

        	#### END USER EDIT
        	#### END USER EDIT
        	#### END USER EDIT
       	else:
		runname = json_variables['runname']
	
                base_directory = json_variables['_base_directory']

                path = base_directory.replace('\/','/') + "/"

                os.chdir(path)
		data_path = path

                pdbfile1 = json_variables['refpdbfile'][0]
                #head, pdbfile1 = os.path.split(temp_refpdbfile[0])

                pdbfile2 = json_variables['movepdbfile'][0]
		#head, pdbfile2 = os.path.split(temp_movepdbfile[0])

		ofile = json_variables['dcdfile']
		acceptInitial_list_box = json_variables['acceptIntial_list_box']
		pos = json_variables['x0']
		trans = json_variables['n_xyz_moves']
		dtrans = json_variables['xyz_step_size']
		theta = json_variables['n_ang_moves']
		dtheta = json_variables['theta_step_size']

		try:
			advanced_input = json_variables['advanced_input']
		except:
			advanced_input = 'off'

		if(advanced_input == "on"):
		
			basis = json_variables['basis']
			cutoff = json_variables['cutoff']
			lowrg = json_variables['lowrg']
			highrg = json_variables['highrg']
 			zcutoff = json_variables['zcutoff']

			zflag_list_box = json_variables['zflag_list_box']
 			cflag_list_box = json_variables['cflag_list_box']

		else:
			basis = 'CA'
			cutoff = '3.0'
			lowrg = "0.0"
			highrg = "400.0"
			zcutoff = "0.0"
			zflag_list_box = "c1"
			cflag_list_box = "c1"

                if(acceptInitial_list_box == 'c1'):
                        accpos = '0' # NO
                elif(acceptInitial_list_box == 'c2'):
                        accpos = '1' # YES
 		
                if(zflag_list_box == 'c1'):
                        zflag = '0' # NO
                elif(zflag_list_box == 'c2'):
                        zflag = '1' # YES

                if(cflag_list_box == 'c1'):
                        cflag = '0' # NO
			confile = 'constraints.txt'
                elif(cflag_list_box == 'c2'):
                        cflag = '1' # YES
			confile = json_variables['confile'][0]
			#head, confile = os.path.split(temp_confile[0])

		try:
			excluded_input = json_variables['excluded_input']
		except:
			excluded_input = 'off'

		if(excluded_input == "on"):
			nexsegments1 = json_variables['n1_excluded']
			nsegments1 = json_variables['name1_excluded']
			reslow1 = json_variables['first1_excluded']
			numcont1 = json_variables['ncont1_excluded']
			nexsegments2 = json_variables['n2_excluded']
			nsegments2 = json_variables['name2_excluded']
			reslow2 = json_variables['first2_excluded']
			numcont2 = json_variables['ncont2_excluded']

		else:
			nexsegments1 = '3'
			nsegments1 = 'INT1,INT2,LED1'
			reslow1 = '271,271,94'
			numcont1 = '18,18,31'
			nexsegments2 = '3'
			nsegments2 = 'INT3,INT4,LED2'
			reslow2 = '271,271,94'
			numcont2 = '18,18,31'

	svariables={}

	svariables['runname'] = (str(runname),'string')
 	svariables['path']		= (str(path),'string')
 	svariables['pdbmol1']		= (str(pdbfile1),'string')
 	svariables['pdbmol2']		= (str(pdbfile2),'string')
 	svariables['ofile']		= (str(ofile),'string')
 	svariables['accpos']		= (str(accpos),'int')
 	svariables['pos']		= (str(pos),'float_array')
 	svariables['trans']		= (str(trans),'int_array')
 	svariables['dtrans']		= (str(dtrans),'float_array')
 	svariables['theta']		= (str(theta),'int_array')
 	svariables['dtheta']		= (str(dtheta),'float_array')
 	svariables['basis']		= (str(basis),'string')
 	svariables['cutoff']		= (str(cutoff),'float')
 	svariables['lowrg']		= (str(lowrg),'float')
 	svariables['highrg']		= (str(highrg),'float')
 	svariables['zflag']		= (str(zflag),'int')
 	svariables['zcutoff']		= (str(zcutoff),'float')
 	svariables['cflag']		= (str(cflag),'int')
 	svariables['confile']		= (str(confile),'string')

 	svariables['nexsegments1']	= (str(nexsegments1),'int')
 	svariables['nsegments1']		= (str(nsegments1),'string')
 	svariables['reslow1']		= (str(reslow1),'int_array')
 	svariables['numcont1']		= (str(numcont1),'int_array')
 	svariables['nexsegments2']	= (str(nexsegments2),'int')
 	svariables['nsegments2']		= (str(nsegments2),'string')
 	svariables['reslow2']		= (str(reslow2),'int_array')
 	svariables['numcont2']		= (str(numcont2),'int_array')

 	error,self.variables=input_filter.type_check_and_convert(svariables)

	error = []
        if(len(error)>0):

                self.message_box(error,'skull.png')
#               warning.png, information.png, skull.png, toast.png

                output_dict['error'] = 'Error in input variables'
                output_dict['sasoutput2'] = 'run failed'
                print json.dumps( output_dict )
                return
        else:
                #error=align2_filter.check_align(self.variables,no_file_check="true")
                #error=align2_filter.check_align(self.variables,no_file_check="true")

                if(len(error) != 0):
                        self.message_box(error,'warning.png')
                        output_dict['error'] = 'Error in two-body grid variables'
                        output_dict['sasoutput2'] = 'run failed'
                        print json.dumps( output_dict )
                        return

		runname=self.variables['runname'][0]

		if os.path.exists(runname+'/'+self.module):
			shutil.rmtree(runname+'/'+self.module)

		txtQueue=multiprocessing.JoinableQueue()
		process=multiprocessing.Process(target=two_body_grid.two_body_grid,args=(self.variables,txtQueue))
                process.start()

                total_string = self.background_job(process,txtQueue,json_variables)
		print(total_string)

        if total_string:
                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )
        else:
                error_string = 'Exception encountered executing '+self.module+' program: please submit feedback and attach run log'
                output_dict['error'] = error_string
#                output_dict['_empty_return'] = 1
                print json.dumps( output_dict )

		
if __name__=='__main__':

	json_flag = True
	#json_flag = False

	if (len(sys.argv) < 1):
		print "\{\"error\":\"two body grid called with no arguments\"\}\n";
# 		print 'exiting now'

	elif len(sys.argv) > 1:
		json_variables = " "
		if(json_flag):
			argv_io_string = StringIO(sys.argv[1])
			json_variables = json.load(argv_io_string)
		a=TwoBodyGrid_Drv()
		a.run_me(json_flag,json_variables,sys.argv[1])

